{"mappings":"I,E,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCgBA,SAAS,EAAmB,CAAY,EAQtC,OALe,AAFO,EAAa,OAAO,CAAC,WAAY,OAGpD,KAAK,CAAC,KACN,GAAG,CAAC,SAAC,CAFR,EAEiB,OAAA,EAAK,MAAM,CAAC,GAAG,WAAW,GAAK,EAAK,KAAK,CAAC,GAAG,WAAW,EACtE,GAAA,IAAI,CAAC,IAGV,CArBA,A,C,A,C,S,C,E,G,M,O,C,G,O,E,E,C,E,EAFmB,SAAS,gBAAgB,CAAC,iB,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,EAEtC,OAAO,CAAC,SAAC,CAAhB,EACE,IAAM,EAAQ,SAAS,aAAa,CAAC,QAErC,CAAA,EAAM,SAAS,CAAG,cAClB,EAAM,OAAO,CAAG,EAAM,EAAE,CACxB,EAAM,WAAW,CAAG,EAAmB,EAAM,IAAI,EAEjD,EAAM,WAAW,CAAG,EAAmB,EAAM,IAAI,EAEjD,EAAM,qBAAqB,CAAC,WAAY,EAC1C","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar fields = _to_consumable_array(document.querySelectorAll(\".field-text\"));\nfields.forEach(function(field) {\n    var label = document.createElement(\"label\");\n    label.className = \"field-label\";\n    label.htmlFor = field.id;\n    label.textContent = transformCamelCase(field.name);\n    field.placeholder = transformCamelCase(field.name);\n    field.insertAdjacentElement(\"afterend\", label);\n});\nfunction transformCamelCase(strCamelCase) {\n    var normalizedStr = strCamelCase.replace(/([A-Z])/g, \" $1\");\n    var result = normalizedStr.split(\" \").map(function(word) {\n        return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n    }).join(\" \");\n    return result;\n}\n\n//# sourceMappingURL=index.b323b77f.js.map\n","'use strict';\n\nconst fields = [...document.querySelectorAll('.field-text')];\n\nfields.forEach((field) => {\n  const label = document.createElement('label');\n\n  label.className = 'field-label';\n  label.htmlFor = field.id;\n  label.textContent = transformCamelCase(field.name);\n\n  field.placeholder = transformCamelCase(field.name);\n\n  field.insertAdjacentElement('afterend', label);\n});\n\nfunction transformCamelCase(strCamelCase) {\n  const normalizedStr = strCamelCase.replace(/([A-Z])/g, ' $1');\n\n  const result = normalizedStr\n    .split(' ')\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n    .join(' ');\n\n  return result;\n}\n"],"names":["arr","_array_like_to_array","len","length","i","arr2","Array","transformCamelCase","strCamelCase","normalizedStr","replace","split","map","word","charAt","toUpperCase","slice","toLowerCase","join","fields","_array_without_holes","isArray","document","querySelectorAll","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","constructor","name","test","_non_iterable_spread","TypeError","forEach","field","label","createElement","className","htmlFor","id","textContent","placeholder","insertAdjacentElement"],"version":3,"file":"index.b323b77f.js.map"}